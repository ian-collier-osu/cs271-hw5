Microsoft (R) Macro Assembler Version 14.14.26433.0	    03/17/19 19:03:27
List Sorting    (Project05.asm				     Page 1 - 1


				TITLE List Sorting    (Project05.asm)

				; Author: Ian Collier
				; CS 271 / Project 05                Date: 2/24/2019
				; Description: Generates a list of random numbers then sorts it

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 000003E7			RAND_UPPER_LIMIT = 999
 = 00000064			RAND_LOWER_LIMIT = 100
 = 000000C8			INPUT_UPPER_LIMIT = 200
 = 0000000A			INPUT_LOWER_LIMIT = 10
 =-00000001			INVALID_INPUT = -1

 00000000			.data

				; Strings
 00000000 52 61 6E 64 6F	intro1		BYTE	"Random Integer Sorting by Ian Collier",0
	   6D 20 49 6E 74
	   65 67 65 72 20
	   53 6F 72 74 69
	   6E 67 20 62 79
	   20 49 61 6E 20
	   43 6F 6C 6C 69
	   65 72 00
 00000026 57 68 61 74 20	intro2		BYTE	"What this program does:",0
	   74 68 69 73 20
	   70 72 6F 67 72
	   61 6D 20 64 6F
	   65 73 3A 00
 0000003E 28 31 29 20 47	intro3		BYTE	"(1) Generates a list (of user set size) of random integers between 100 - 999.\n(2) Sorts the list in descending order.\n (3) Finds the median value.",0
	   65 6E 65 72 61
	   74 65 73 20 61
	   20 6C 69 73 74
	   20 28 6F 66 20
	   75 73 65 72 20
	   73 65 74 20 73
	   69 7A 65 29 20
	   6F 66 20 72 61
	   6E 64 6F 6D 20
	   69 6E 74 65 67
	   65 72 73 20 62
	   65 74 77 65 65
	   6E 20 31 30 30
	   20 2D 20 39 39
	   39 2E 5C 6E 28
	   32 29 20 53 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 20 69 6E
	   20 64 65 73 63
	   65 6E 64 69 6E
	   67 20 6F 72 64
	   65 72 2E 5C 6E
	   20 28 33 29 20
	   46 69 6E 64 73
	   20 74 68 65 20
	   6D 65 64 69 61
	   6E 20 76 61 6C
	   75 65 2E 00

 000000D3 48 6F 77 20 62	getdata1	BYTE	"How big should the list be [10-200]: ",0
	   69 67 20 73 68
	   6F 75 6C 64 20
	   74 68 65 20 6C
	   69 73 74 20 62
	   65 20 5B 31 30
	   2D 32 30 30 5D
	   3A 20 00
 000000F9 4F 75 74 20 6F	getdataerr1	BYTE	"Out of range.",0
	   66 20 72 61 6E
	   67 65 2E 00

 00000107 20 20 00		spacer		BYTE	"  ",0

 0000010A 54 68 65 20 75	title1		BYTE	"The unsorted list: ",0
	   6E 73 6F 72 74
	   65 64 20 6C 69
	   73 74 3A 20 00
 0000011E 54 68 65 20 73	title2		BYTE	"The sorted list: ",0
	   6F 72 74 65 64
	   20 6C 69 73 74
	   3A 20 00
 00000130 54 68 65 20 6D	title3		BYTE	"The median value: ",0
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 3A 20 00


				; Main vars
 00000143 00000000		arrN		DWORD	?		; N array size from user input
 00000147  000000C8 [		arrList		DWORD	INPUT_UPPER_LIMIT	DUP(?)
	    00000000
	   ]
 00000467 00000000		tempVar		DWORD	?


 00000000			.code
 00000000			main PROC

					; Set random seed
 00000000  E8 00000000 E		call	Randomize

					; Intro
 00000005  E8 0000006B			call	printIntro

					; Get the array size
 0000000A  68 00000143 R		push	OFFSET arrN
 0000000F  E8 0000009B			call	getUserData

					; Fill the array
 00000014  68 00000147 R		push	OFFSET arrList
 00000019  FF 35 00000143 R		push	arrN
 0000001F  E8 000000E7			call	fillArray

					; Print unsorted
 00000024  68 00000147 R		push	OFFSET arrList
 00000029  FF 35 00000143 R		push	arrN
 0000002F  68 0000010A R		push	OFFSET title1
 00000034  E8 0000016D			call	printArray

					; Sort
 00000039  68 00000147 R		push	OFFSET arrList
 0000003E  FF 35 00000143 R		push	arrN
 00000044  E8 000000EB			call	selectionSortArray

					; Print sorted
 00000049  68 00000147 R		push	OFFSET arrList
 0000004E  FF 35 00000143 R		push	arrN
 00000054  68 0000011E R		push	OFFSET title2
 00000059  E8 00000148			call	printArray

					; Print median
 0000005E  68 00000147 R		push	OFFSET arrList
 00000063  FF 35 00000143 R		push	arrN
 00000069  E8 0000016D			call	printArrayMedian

					exit	; exit to operating system
 0000006E  6A 00	   *	    push   +000000000h
 00000070  E8 00000000 E   *	    call   ExitProcess
 00000075			main ENDP


				; Prints some messages
 00000075			printIntro PROC
 00000075  60				pushad

					; Print title of program
 00000076  BA 00000000 R		mov		edx,OFFSET intro1
 0000007B  E8 00000000 E		call	WriteString
 00000080  E8 00000000 E		call	Crlf
 00000085  E8 00000000 E		call	Crlf
					; Print instructions
 0000008A  BA 00000026 R		mov		edx,OFFSET intro2
 0000008F  E8 00000000 E		call	WriteString
 00000094  E8 00000000 E		call	Crlf
 00000099  BA 0000003E R		mov		edx,OFFSET intro3
 0000009E  E8 00000000 E		call	WriteString
 000000A3  E8 00000000 E		call	Crlf
 000000A8  E8 00000000 E		call	Crlf

 000000AD  61				popad
 000000AE  C3				ret
 000000AF			printIntro ENDP


				; Gets user input for array size bounded by const limits
				; Params: &n (Where to put input)
 000000AF			getUserData PROC
 000000AF  55				push	ebp
 000000B0  8B EC			mov		ebp, esp		; Setup stack frame

 000000B2  8B 5D 08			mov		ebx, [ebp+8]	; Get address of n into ebx

					; Loop until break
 000000B5				getUserDataLoop:
						; Input prompt
 000000B5  BA 000000D3 R			mov		edx,OFFSET getdata1
 000000BA  E8 00000000 E			call	WriteString
						; Get user input
 000000BF  E8 00000000 E			call	ReadInt
 000000C4  89 03				mov		[ebx], eax		; Store input in n
						; Validate using subproc
 000000C6  53					push	ebx				; Pass &n as param
 000000C7  E8 0000000D				call	validateUserData

						; If not invalid break
 000000CC  8B 03				mov		eax, [ebx]
 000000CE  83 F8 FF				cmp		eax, INVALID_INPUT
 000000D1  75 02				jne		getUserDataDone

						; Else loop
 000000D3  EB E0				jmp		getUserDataLoop

 000000D5				getUserDataDone:
 000000D5  5D				pop		ebp
 000000D6  C2 0004			ret		4
 000000D9			getUserData ENDP

				; Checks if input is valid (between upper and lower limit)
				; Params: &n (Where to put input)
				; Returns: n = INVALID_INPUT if invalid, otherwise doesn't change value
 000000D9			validateUserData PROC
 000000D9  55				push	ebp
 000000DA  8B EC			mov		ebp, esp		; Setup stack frame

 000000DC  8B 5D 08			mov		ebx, [ebp+8]	; Get address of n into ebx

					; If below lower limit error
 000000DF  8B 03			mov		eax, [ebx]
 000000E1  83 F8 0A			cmp		eax, INPUT_LOWER_LIMIT
 000000E4  7C 0B			jl		validateUserDataErr

					; Or if above upper limit error
 000000E6  8B 03			mov		eax, [ebx]
 000000E8  3D 000000C8			cmp		eax, INPUT_UPPER_LIMIT
 000000ED  7F 02			jg		validateUserDataErr

					; In range, no error
 000000EF  EB 16			jmp		validateUserDataDone

					; Error label
 000000F1				validateUserDataErr:
 000000F1  B8 FFFFFFFF				mov		eax, INVALID_INPUT
 000000F6  89 03				mov		[ebx], eax
 000000F8  BA 000000F9 R			mov		edx,OFFSET getdataerr1	; Prompt
 000000FD  E8 00000000 E			call	WriteString
 00000102  E8 00000000 E			call	Crlf

						
 00000107				validateUserDataDone:
 00000107  5D				pop		ebp
 00000108  C2 0004			ret		4
 0000010B			validateUserData ENDP


				; Fills array with random numbers
				; Params:  &arr (Array), n (Array size)
				; Preconditions: 
 0000010B			fillArray PROC
 0000010B  55				push	ebp
 0000010C  8B EC			mov		ebp, esp		; Setup stack frame

 0000010E  8B 4D 08			mov		ecx, [ebp+8]	; Get value of n into loop counter
 00000111  8B 75 0C			mov		esi, [ebp+12]	; Get address of array into esi

					; Set random range
 00000114  BA 000003E7			mov		edx, RAND_UPPER_LIMIT
 00000119  83 EA 64			sub		edx, RAND_LOWER_LIMIT
 0000011C  83 C2 01			add		edx, 1


 0000011F				fillArrayLoop:
 0000011F  8B C2				mov		eax, edx				; Get random number in (0, edx)
 00000121  E8 00000000 E			call	RandomRange
 00000126  83 C0 64				add		eax, RAND_LOWER_LIMIT	; Adjust to get the number in range

 00000129  89 06				mov		[esi], eax				; Store in array
 0000012B  83 C6 04				add		esi, 4
 0000012E  E2 EF				loop	fillArrayLoop

 00000130  5D				pop		ebp
 00000131  C2 0008			ret		8
 00000134			fillArray ENDP

				; Params: &arr (Array), n (Array len)
 00000134			selectionSortArray PROC
 00000134  55				push	ebp
 00000135  8B EC			mov		ebp, esp		; Setup stack frame

					; N = [ebp+8]
					; Array = [ebp+12]

 00000137  8B 75 0C			mov		esi, [ebp+12]

 0000013A  BB 00000000			mov		ebx, 0			; Outer loop index
 0000013F  B9 00000000			mov		ecx, 0
 00000144				selectionSortArrayLoop1:

 00000144  8B CB				mov		ecx, ebx
 00000146  8B D3				mov		edx, ebx		; Inner loop index = ebx + 1
 00000148  42					inc		edx
 00000149					selectionSortArrayLoop2:
 00000149  52						push	edx
							; If arr[edx] >= arr[ebx] skip
 0000014A  B8 00000004					mov		eax, 4
 0000014F  F7 E2					mul		edx
 00000151  8B 3C 06					mov		edi, [esi+eax]	; edi = arr[edx]

 00000154  B8 00000004					mov		eax, 4
 00000159  F7 E3					mul		ebx
 0000015B  8B 04 06					mov		eax, [esi+eax]	; eax = arr[ebx]

 0000015E  3B F8					cmp		edi, eax
 00000160  5A						pop		edx
 00000161  7D 02					jge		selectionSortArrayLoop2Skip

							; Else
 00000163  8B CA					mov		ecx, edx

 00000165						selectionSortArrayLoop2Skip:
 00000165  42						inc		edx
 00000166  8B 45 08					mov		eax, [ebp+8]
 00000169  3B D0					cmp		edx, eax
 0000016B  7C DC					jl		selectionSortArrayLoop2 ; Loop while edx < N

						; Swap arr[ebx], arr[ecx]

 0000016D  B8 00000004				mov		eax, 4
 00000172  F7 E3				mul		ebx
 00000174  8B 04 06				mov		eax, [esi+eax]
 00000177  50					push	eax					; arr[ebx] value on stack

 00000178  B8 00000004				mov		eax, 4
 0000017D  F7 E1				mul		ecx
 0000017F  8B 04 06				mov		eax, [esi+eax]		
 00000182  50					push	eax					; arr[ecx] value on stack

 00000183  B8 00000004				mov		eax, 4
 00000188  F7 E3				mul		ebx
 0000018A  03 C6				add		eax, esi
 0000018C  8F 00				pop		[eax]				; pop arr[ecx] value into arr[ebx]

 0000018E  B8 00000004				mov		eax, 4
 00000193  F7 E1				mul		ecx
 00000195  03 C6				add		eax, esi			; pop arr[ebx] value into arr[ecx]
 00000197  8F 00				pop		[eax]


 00000199  43					inc		ebx
 0000019A  8B 45 08				mov		eax, [ebp+8]
 0000019D  48					dec		eax
 0000019E  3B D8				cmp		ebx, eax
 000001A0  7C A2				jl		selectionSortArrayLoop1 ; Loop while ebx < N - 1
						
 000001A2  5D				pop		ebp
 000001A3  C2 0008			ret		8
 000001A6			selectionSortArray ENDP



				; Prints an array
				; Params: &arr (Array), n (Array size), &title (String title)
 000001A6			printArray PROC
 000001A6  55				push	ebp
 000001A7  8B EC			mov		ebp, esp		; Setup stack frame

 000001A9  8B 55 08			mov		edx, [ebp+8]	; Print title
 000001AC  E8 00000000 E		call	WriteString
 000001B1  E8 00000000 E		call	Crlf

 000001B6  8B 4D 0C			mov		ecx, [ebp+12]	; Get value of n into loop counter
 000001B9  8B 75 10			mov		esi, [ebp+16]	; Get address of array into esi

 000001BC				printArrayLoop:
 000001BC  8B 06				mov		eax, [esi]
 000001BE  E8 00000000 E			call	WriteDec
 000001C3  BA 00000107 R			mov		edx, OFFSET spacer
 000001C8  E8 00000000 E			call	WriteString
 000001CD  83 C6 04				add		esi, 4
 000001D0  E2 EA				loop	printArrayLoop

 000001D2  E8 00000000 E		call	Crlf

 000001D7  5D				pop		ebp
 000001D8  C2 000C			ret		12
 000001DB			printArray ENDP

				; Finds and prints the median value of an array
				; Params: &arr (Array), n (Array size)
				; Preconditions: Expects a sorted array
 000001DB			printArrayMedian PROC
 000001DB  55				push	ebp
 000001DC  8B EC			mov		ebp, esp		; Setup stack frame

 000001DE  8B 45 08			mov		eax, [ebp+8]	; Get value of n into eax
 000001E1  8B 75 0C			mov		esi, [ebp+12]	; Get address of array into esi

					; Print title
 000001E4  BA 00000130 R		mov		edx, OFFSET title3
 000001E9  E8 00000000 E		call	WriteString
 000001EE  E8 00000000 E		call	Crlf

					; eax /= 2 - Find index of n / 2
 000001F3  BB 00000002			mov		ebx, 2
 000001F8  33 D2			xor		edx, edx
 000001FA  F7 F3			div		ebx

					; esi += (eax * 4) - Set esi to index
 000001FC  BB 00000004			mov		ebx, 4
 00000201  F7 E3			mul		ebx
 00000203  03 F0			add		esi, eax

					; Print median
 00000205  8B 06			mov		eax, [esi]
 00000207  E8 00000000 E		call	WriteDec

 0000020C  E8 00000000 E		call	Crlf

 00000211  5D				pop		ebp
 00000212  C2 0008			ret		8
 00000215			printArrayMedian ENDP

				END main
Microsoft (R) Macro Assembler Version 14.14.26433.0	    03/17/19 19:03:27
List Sorting    (Project05.asm				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000046B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000215 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
fillArray  . . . . . . . . . . .	P Near	 0000010B _TEXT	Length= 00000029 Public STDCALL
  fillArrayLoop  . . . . . . . .	L Near	 0000011F _TEXT	
getUserData  . . . . . . . . . .	P Near	 000000AF _TEXT	Length= 0000002A Public STDCALL
  getUserDataLoop  . . . . . . .	L Near	 000000B5 _TEXT	
  getUserDataDone  . . . . . . .	L Near	 000000D5 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000075 Public STDCALL
printArrayMedian . . . . . . . .	P Near	 000001DB _TEXT	Length= 0000003A Public STDCALL
printArray . . . . . . . . . . .	P Near	 000001A6 _TEXT	Length= 00000035 Public STDCALL
  printArrayLoop . . . . . . . .	L Near	 000001BC _TEXT	
printIntro . . . . . . . . . . .	P Near	 00000075 _TEXT	Length= 0000003A Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
selectionSortArray . . . . . . .	P Near	 00000134 _TEXT	Length= 00000072 Public STDCALL
  selectionSortArrayLoop1  . . .	L Near	 00000144 _TEXT	
  selectionSortArrayLoop2  . . .	L Near	 00000149 _TEXT	
  selectionSortArrayLoop2Skip  .	L Near	 00000165 _TEXT	
validateUserData . . . . . . . .	P Near	 000000D9 _TEXT	Length= 00000032 Public STDCALL
  validateUserDataErr  . . . . .	L Near	 000000F1 _TEXT	
  validateUserDataDone . . . . .	L Near	 00000107 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INPUT_LOWER_LIMIT  . . . . . . .	Number	 0000000Ah   
INPUT_UPPER_LIMIT  . . . . . . .	Number	 000000C8h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
INVALID_INPUT  . . . . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RAND_LOWER_LIMIT . . . . . . . .	Number	 00000064h   
RAND_UPPER_LIMIT . . . . . . . .	Number	 000003E7h   
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrList  . . . . . . . . . . . .	DWord	 00000147 _DATA	
arrN . . . . . . . . . . . . . .	DWord	 00000143 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
getdata1 . . . . . . . . . . . .	Byte	 000000D3 _DATA	
getdataerr1  . . . . . . . . . .	Byte	 000000F9 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000026 _DATA	
intro3 . . . . . . . . . . . . .	Byte	 0000003E _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
spacer . . . . . . . . . . . . .	Byte	 00000107 _DATA	
tempVar  . . . . . . . . . . . .	DWord	 00000467 _DATA	
title1 . . . . . . . . . . . . .	Byte	 0000010A _DATA	
title2 . . . . . . . . . . . . .	Byte	 0000011E _DATA	
title3 . . . . . . . . . . . . .	Byte	 00000130 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
